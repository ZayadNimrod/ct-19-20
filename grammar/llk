# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= includeRep structdeclRep vardeclRep functdeclRep EOF


includeRep ::= include includeRep | ε

include    ::= "#include" STRING_LITERAL



structdeclRep ::= structdecl structDeclRep | ε

structdecl ::= structtype "{" vardecl vardeclRep "}" ";"    # structure declaration



vardeclRep ::= vardecl vardeclRep | ε

vardecl    ::= type IDENT (ε | arrayDecl)";" # normal declaration, e.g. int a; vs array declaration, e.g. int a[2];

             
arrayDecl :: = "[" INT_LITERAL "]"


funcdeclRep::= functdecl funcdeclRep | ε

fundecl    ::= type IDENT "(" params ")" block    # function declaration



type       ::= ("int" | "char" | "void" | structtype) optionalStar

optionalStar = "*" | ε

structtype ::= "struct" IDENT

params     ::=  type IDENT extraParam |	ε

extraParam ::= "," type IDENT extraParam | ε


stmtRep    ::= stmt stmtRep | ε

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt maybeElse  # if then else
             | "return" maybeExp ";"                    # return
             | exp (assign | ε) ";" # assignment vs expression statement, e.g. a function call

assign	   :: "=" exp

maybeElse  ::= "else" stmt | ε

maybeExp   ::= exp | ε

block      ::= "{" vardeclRep stmtRep "}"

exp        ::= noOpExp           
             | binaryOp
             
#seperating exp out into these means we avoid the case where it loops around all the binary op levels until it parses a || as more tightly binding than && (for example) without brackets   
noOpExp    ::=  "(" exp ")"
  			 | (IDENT | INT_LITERAL)
             | "-" exp
             | CHAR_LITERAL
             | STRING_LITERAL
             | arrayaccess | fieldaccess | valueat | funcall | sizeof | typecast
             
             
#precedence of operators taken from https://en.cppreference.com/w/c/language/operator_precedence
binaryOp   ::= binaryOp "||" binaryOp | binaryOp2 # binary operators; lowest precendece: OR
             
binaryOp2  ::= binaryOp2 "&&" binaryOp2  | binaryOp3

binaryOp3  ::= binaryOp3 ("!=" | "==") binaryOp3 | binaryOp4

binaryOp4  ::= binaryOp4 (">" | "<" | ">=" | "<=" ) binaryOp4 | binaryOp5 

binaryOp5  ::= binaryOp5 ("+" | "-") binaryOp5 | binaryOp6

binaryOp6  ::= binaryop6 ("/" | "*" | "%") binaryOp6 | noOpExp


funcall      ::= IDENT "(" maybeArgs ")"

maybeArgs 	 ::= exp extraArg | ε

extrArg 	 ::= "," exp extraArg | ε

arrayaccess  ::= exp "[" exp "]"                  # array access
fieldaccess  ::= exp "." IDENT                    # structure field member access
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")" exp                 # type casting


