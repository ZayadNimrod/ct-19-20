# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= (include)* (structdecl)* (vardecl)* (fundecl)* varsThenFuncs  EOF

include    ::= "#include" STRING_LITERAL

structdecl ::= structtype "{" (vardecl)+ "}" ";"    # structure declaration

vardecl    ::= nameDecl (normalVarDec | arrayDecl)  
normalVarDecl ::= ";" 					 # normal declaration, e.g. int a;
arrayDecl 	::= "[" INT_LITERAL "]" ";"	 # array declaration, e.g. int a[2];


fundecl    ::= nameDecl "(" params ")" block    # function declaration

type       ::= ("int" | "char" | "void" | structtype) ["*"]
structtype ::= "struct" IDENT

params     ::= [ nameDecl ("," nameDecl)* ]

nameDecl   ::= type IDENT


stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp assignmentOrExpressionCont        # assignment, or  expression statement, e.g. a function call
             
assignmentOrExpressionCont ::= assignmentCont | expressionCont
assignmentCont ::= "=" exp ";"
expressionCont ::= ";"

block      ::= "{" (vardecl)* (stmt)* "}"

exp        ::= bracketsOrTypeCast arrayOrFieldAccessOrBinaryOps
             | identOrFunCall arrayOrFieldAccessOrBinaryOps
             | INT_LITERAL arrayOrFieldAccessOrBinaryOps
             | "-" exp arrayOrFieldAccessOrBinaryOps
             | CHAR_LITERAL arrayOrFieldAccessOrBinaryOps
             | STRING_LITERAL arrayOrFieldAccessOrBinaryOps
             | valueat arrayOrFieldAccessOrBinaryOps
             | funcall arrayOrFieldAccessOrBinaryOps
             | sizeof arrayOrFieldAccessOrBinaryOps
             | typecast arrayOrFieldAccessOrBinaryOps
             
             
arrayOrFieldAccessOrBinaryOps :: = (arrayAccess | fieldAccess | binaryOps | ε)


#precedence of operators taken from https://en.cppreference.com/w/c/language/operator_precedence

binaryOps := ( "||" |ε ) binaryOps2

binaryOps2 := ("&&" | ε ) binaryOps3

binaryOps3 := ( "!=" | "==" | ε) binaryOps4

binaryOps4 := (">" | "<" | ">=" | "<=" | ε) binaryOps5

binaryOps5 := ( "+" | "-" | ε ) binaryOps6

binaryOps6 := ( "/" | "*" | "%" | ε ) exp


identOrFunCall := IDENT (funCall | ε)


funcall      ::= "(" maybeArgs ")"

maybeArgs 	 ::= exp extraArg |ε 

extrArg 	 ::= "," exp extraArg | ε

arrayaccess  ::=  "[" exp "]"                  # array access
fieldaccess  ::= "." IDENT                    # structure field member access
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
sizeof       ::= "sizeof" "(" type ")"            # size of type

bracketsOrtypeCast := "(" (brackets | typeCast)

brackets := exp ")"

typecast     ::= type ")" exp                 # type casting


